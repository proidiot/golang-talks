Go/Expect
10 July 2024

Charles Southerland
ATX Golang Meetup


* It all started at NIST...

.image nist-logo.png _ 800

Among other tasks, NIST sets acceptance standards involving software developed
for the US government, notably including software outsourced by contract.

How could NIST fairly and clearly set expectations for those creating this
software?


* A tool for automated black-box testing

.image don-libes.jpg

Don Libes, a person who worked at NIST at the time, created a tool called
Expect which allowed describing interactive behaviors using a sequence of
expected output from some system being tested and potentially related data to
send back to that system.


* Expect's legacy

The simplicity of this approach paired with the flexible level of abstraction
when declaring expected output allowed this tool to quickly become ubiquitous
in certain industries, like telecom, hardware, embedded, and info sec. This has
also Expect to influence testing systems in many other languages.

.image exploring-expect-book.jpeg

.link https://www.oreilly.com/library/view/exploring-expect/9781565920903/ The definitive book on Expect is the O'Reilly book Exploring Expect


* Tcl (a.k.a. Tool Command Language)

.image tcl-powered.svg

Don Libes felt the main way to use Expect should be with a domain-specific
language rather than a library for an existing language like C (though such a
library was also eventually created). Around the same time that he was inspired
to create Expect, Tcl was created as a new kind of language intended to be used
as the basis for other domain-specific languages, and so it was the obvious
choice.


* Hello Tcl/Expect!

hello.exp:
.code hello.exp

output:
.code hello.stdout


* What if you get unexpected output?

unexpected.exp:
.code unexpected.exp

output:
.code unexpected.stdout


* Chaining, branching, other processes

http10.exp:
.code http10.exp

output:
.code http10.stdout


* Why not just use the original Tcl version of Expect?

For really simple tests, the small amount of Tcl needed for Expect is fine. But
when things get more complicated, more Tcl is needed, and that's when
programmers tend to sour on this tool.

Unfortunately, while Tcl is historically significant, the syntax is pretty
different from most other programming languages. Over the years, most software
engineers have chosen to use Lua instead of Tcl when creating domain-specific
languages, as the syntax is more familiar and Windows support has existed for
longer.


* Why use Go/Expect?

Well, this is the Go Meetup! :P

Seriously though, Tcl/Expect is a great way to quickly create tests for network
services where the tests rarely have to change even though the services are
deployed in a variety of ways. These days, Go is the language most associated
with quickly constructed network services that are deployed in a variety of
ways, so it seems a natural fit.


* Implementations of Go/Expect?

A quick search will bring up several attempts to create an Expect-like library for Go:

- [[https://github.com/google/goexpect][github.com/google/goexpect]]
- [[https://github.com/Netflix/go-expect][github.com/Netflix/go-expect]]
- [[https://github.com/ThomasRooney/gexpect][github.com/ThomasRooney/gexpect]]

Unfortunately, *none*of*these*have*been*updated*in*years*. In fact, the most
recently updated option (from Google) is listed as deprecated.

But thanks to forks, maybe not all is lost? More on that in a bit, but for now
let's try these original versions anyway.



# hello.exp

* Hello Expect in Tcl/Expect

As a reminder, here's the original Tcl version of hello.exp:
.code hello.exp


* Hello Expect with github.com/google/goexpect

Now here is a (roughly) similar setup with github.com/google/goexpect:
.play hello-google.go /^//START/,/^//END/

It is timing out? Because it is greedy! There is still a learning curve, and
somewhat confusing documentation.


* Hello Expect with github.com/Netflix/go-expect

Here is an outline of what it would look like with the Netflix implementation:
.play hello-netflix.go /^//START/,/^//END/

This moves the spawn behavior into Go, which kinda makes sense.


* Netflix forks
Fortunately there seem to be somewhat active forks of the Netflix implementation
.image netflix-go-expect-active-forks.png _ 800


* Google forks
There are even more somewhat active forks of the Google implementation
.image google-goexpect-active-forks.png _ 800


* Same name, different Expect

Take note! There are also several Go libraries and tools where the name was
probably inspired by similarly named tools in other languages, which themselves
might have had some tenuous historical ties to the original Expect, but these
Go libraries and tools are pretty far removed from the functionality of
Tcl/Expect:

- [[https://golang.org/x/tools/go/expect][golang.org/x/tools/go/expect]]
- [[https://github.com/karlseguin/expect][github.com/karlseguin/expect]]
- [[https://github.com/gavv/httpexpect][github.com/gavv/httpexpect]]


* My thoughts

A tool like Expect is still very useful today. Quickly creating portable
black-box tests is more relevant than ever.

For now, if you have to test something very simple, Tcl/Expect may still be
your best bet. For more complex tests, Go is probably a better choice.

A good, maintained version of Go/Expect might be all that is preventing Go from
taking over that space. While the state of the original Go/Expect attempts
isn't looking great at the moment, the existence of so many forks, some of
which with fairly recent updates, seems to give some hope for the future.

